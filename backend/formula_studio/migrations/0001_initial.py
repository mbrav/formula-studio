# Generated by Django 3.2.8 on 2021-11-13 17:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile_number', models.CharField(max_length=11, unique=True, verbose_name='Mobile Number')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ('last_name', 'first_name'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class Category',
                'verbose_name_plural': 'Class Categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Item Category',
                'verbose_name_plural': 'Item Categories',
                'ordering': ('price',),
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('writen_off', models.BooleanField(default=False, help_text='Set whether the payment should be written off from finances')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('method', models.CharField(choices=[('0', 'Cash'), ('1', 'Transfer'), ('2', 'Card')], default='0', max_length=2)),
                ('status', models.CharField(choices=[('0', 'Pending'), ('1', 'Paid')], default='1', help_text='Payment status', max_length=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ('-date',),
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='ScheduleEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date', models.DateTimeField()),
                ('google_cal_id', models.CharField(blank=True, default='', max_length=40, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(help_text='Category of the class', on_delete=django.db.models.deletion.CASCADE, related_name='schedule_event', to='formula_studio.eventcategory')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'classes',
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateField()),
                ('description', models.CharField(blank=True, max_length=300, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to='formula_studio.payment')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'ordering': ('-registration_date',),
            },
        ),
        migrations.CreateModel(
            name='SubscriptionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10)),
                ('number_of_visits', models.PositiveIntegerField()),
                ('validity_in_days', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Subscription Category',
                'verbose_name_plural': 'Subscription Categories',
                'ordering': ('price',),
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='formula_studio.user')),
            ],
            options={
                'verbose_name': 'Instructor',
                'verbose_name_plural': 'Instructors',
                'ordering': ('last_name', 'first_name'),
            },
            bases=('formula_studio.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='formula_studio.user')),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
                'ordering': ('last_name', 'first_name'),
            },
            bases=('formula_studio.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_visits', to='formula_studio.scheduleevent')),
                ('subscription', models.ForeignKey(help_text='A visit based on a subscription', on_delete=django.db.models.deletion.CASCADE, related_name='subscription_visits', to='formula_studio.subscription')),
            ],
            options={
                'verbose_name': 'Subscription Visit',
                'verbose_name_plural': 'subscription Visits',
                'ordering': ('-schedule_event__date',),
            },
        ),
        migrations.CreateModel(
            name='SubscriptionExtension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('days', models.PositiveIntegerField()),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_extensions', to='formula_studio.subscription')),
            ],
            options={
                'verbose_name': 'Subscription Extension',
                'verbose_name_plural': 'Subscription Extensions',
                'ordering': ('-date',),
            },
        ),
        migrations.AddField(
            model_name='subscription',
            name='subscription_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='formula_studio.subscriptioncategory'),
        ),
        migrations.CreateModel(
            name='SingleVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment', models.ForeignKey(help_text='Payment to which the single visit is registered to', on_delete=django.db.models.deletion.CASCADE, related_name='single_visit', to='formula_studio.payment')),
                ('schedule_event', models.ForeignKey(help_text='Class to which the single visit is registered to', on_delete=django.db.models.deletion.CASCADE, related_name='single_visits', to='formula_studio.scheduleevent')),
                ('member', models.ForeignKey(help_text='Member to which the single visit is registered to', on_delete=django.db.models.deletion.CASCADE, related_name='single_visits', to='formula_studio.member')),
            ],
            options={
                'verbose_name': 'Single Visit',
                'verbose_name_plural': 'Single Visits',
            },
        ),
        migrations.AddField(
            model_name='subscription',
            name='member',
            field=models.ForeignKey(help_text='Subscriptions that the member has', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='formula_studio.member'),
        ),
        migrations.CreateModel(
            name='Signup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('mobile_number', models.CharField(blank=True, max_length=11, verbose_name='Mobile Number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('event_google_cal_id', models.CharField(blank=True, max_length=50, verbose_name='Class Google Calendar ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule_event', models.ForeignKey(blank=True, help_text='Class to which to assign this signup', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='signups', to='formula_studio.scheduleevent')),
                ('single_visit', models.ForeignKey(blank=True, help_text='Single visit to which this signup is assigned', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='signups', to='formula_studio.singlevisit')),
                ('subscription_visit', models.ForeignKey(blank=True, help_text='Subscription visit to which this signup is assigned', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='signups', to='formula_studio.subscriptionvisit')),
                ('member', models.ForeignKey(blank=True, help_text='Member to which to assign this signup', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='signups', to='formula_studio.member')),
            ],
            options={
                'verbose_name': 'Signup',
                'verbose_name_plural': 'Signups',
            },
        ),
        migrations.AddField(
            model_name='scheduleevent',
            name='instructor',
            field=models.ForeignKey(help_text='Classes that the instructor leads', on_delete=django.db.models.deletion.CASCADE, related_name='schedule_event', to='formula_studio.instructor'),
        ),
        migrations.AddField(
            model_name='payment',
            name='member',
            field=models.ForeignKey(help_text='Payments that member has made', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='formula_studio.member'),
        ),
        migrations.CreateModel(
            name='ItemPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='formula_studio.itemcategory')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_purchases', to='formula_studio.payment')),
                ('member', models.ForeignKey(help_text='Item purchases that the member has made', on_delete=django.db.models.deletion.CASCADE, related_name='item_purchases', to='formula_studio.member')),
            ],
            options={
                'verbose_name': 'Item Purchase',
                'verbose_name_plural': 'Item Purchases',
            },
        ),
    ]
